<?php

/**
 * @file
 * Allows administrators to customize the site's navigation menus.
 *
 * A menu (in this context) is a hierarchical collection of links, generally
 * used for navigation. This is not to be confused with the
 * @link menu Menu system @endlink of menu.inc and hook_menu(), which defines
 * page routing requests for Drupal, and also allows the defined page routing
 * URLs to be added to the main site navigation menu.
 */

use Drupal\block\BlockPluginInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Menu\MenuLinkInterface;
use Drupal\Core\Render\Element;
use Drupal\node\NodeInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\system\Entity\Menu;
use Symfony\Cmf\Component\Routing\RouteObjectInterface;
use Symfony\Component\HttpFoundation\Request;

/**
 * Maximum length of menu name as entered by the user. Database length is 32
 * and we add a menu- prefix.
 */
const MENU_MAX_MENU_NAME_LENGTH_UI = 27;

/**
 * Implements hook_help().
 */
function menu_ui_help($route_name, Request $request) {
  switch ($route_name) {
    case 'help.page.menu_ui':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Menu UI module provides an interface for managing menus. A menu is a hierarchical collection of links, which can be within or external to the site, generally used for navigation. For more information, see the <a href="!menu">online documentation for the Menu UI module</a>.', array('!menu' => 'https://drupal.org/documentation/modules/menu/')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Managing menus') . '</dt>';
      $output .= '<dd>' . t('Users with the <em>Administer menus and menu items</em> permission can add, edit, and delete custom menus on the <a href="!menu">Menus page</a>. Custom menus can be special site menus, menus of external links, or any combination of internal and external links. You may create an unlimited number of additional menus, each of which will automatically have an associated block (if you have the <a href="!block_help">Block module</a> installed). By selecting <em>Edit menu</em>, you can add, edit, or delete links for a given menu. The links listing page provides a drag-and-drop interface for controlling the order of links, and creating a hierarchy within the menu.', array('!block_help' => \Drupal::url('help.page', array('name' => 'block')), '!menu' => \Drupal::url('menu_ui.overview_page'))) . '</dd>';
      $output .= '<dt>' . t('Displaying menus') . '</dt>';
      $output .= '<dd>' . t('If you have the Block module enabled, then each menu that you create is rendered in a block that you enable and position on the <a href="!blocks">Block layout page</a>. In some <a href="!themes">themes</a>, the main menu and possibly the secondary menu will be output automatically; you may be able to disable this behavior on the <a href="!themes">theme\'s settings page</a>.', array('!blocks' => (\Drupal::moduleHandler()->moduleExists('block')) ? \Drupal::url('block.admin_display') : '#', '!themes' => \Drupal::url('system.themes_page'), '!theme_settings' => \Drupal::url('system.theme_settings'))) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
  if ($route_name == 'menu_ui.menu_add' && \Drupal::moduleHandler()->moduleExists('block')) {
    return '<p>' . t('You can enable the newly-created block for this menu on the <a href="!blocks">Block layout page</a>.', array('!blocks' => \Drupal::url('block.admin_display'))) . '</p>';
  }
  elseif ($route_name == 'menu_ui.overview_page' && \Drupal::moduleHandler()->moduleExists('block')) {
    return '<p>' . t('Each menu has a corresponding block that is managed on the <a href="!blocks">Block layout page</a>.', array('!blocks' => \Drupal::url('block.admin_display'))) . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function menu_ui_permission() {
  return array(
    'administer menu' => array(
      'title' => t('Administer menus and menu items'),
    ),
  );
}

/**
 * Implements hook_entity_type_build().
 */
function menu_ui_entity_type_build(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['menu']
    ->setFormClass('add', 'Drupal\menu_ui\MenuForm')
    ->setFormClass('edit', 'Drupal\menu_ui\MenuForm')
    ->setFormClass('delete', 'Drupal\menu_ui\Form\MenuDeleteForm')
    ->setListBuilderClass('Drupal\menu_ui\MenuListBuilder')
    ->setLinkTemplate('add-form', 'menu_ui.menu_add')
    ->setLinkTemplate('delete-form', 'menu_ui.delete_menu')
    ->setLinkTemplate('edit-form', 'menu_ui.menu_edit');
}


/**
 * Implements hook_theme().
 */
function menu_ui_theme() {
  return array(
    'menu_overview_form' => array(
      'file' => 'menu_ui.admin.inc',
      'render element' => 'form',
    ),
  );
}

/**
 * Load the data for a single custom menu.
 *
 * @param $menu_name
 *   The unique name of a custom menu to load.
 * @return
 *   Array defining the custom menu, or NULL if the menu doesn't exist.
 */
function menu_ui_load($menu_name) {
  return entity_load('menu', $menu_name);
}

/**
 * Implements hook_menu_insert()
 */
function menu_ui_menu_insert(Menu $menu) {
  menu_cache_clear_all();
  // Invalidate the block cache to update menu-based derivatives.
  if (\Drupal::moduleHandler()->moduleExists('block')) {
    \Drupal::service('plugin.manager.block')->clearCachedDefinitions();
  }

  if ($menu->isSyncing()) {
    return;
  }

  // Make sure the menu is present in the active menus variable so that its
  // items may appear in the menu active trail.
  // See menu_set_active_menu_names().
  $config = \Drupal::config('system.menu');

  $active_menus = $config->get('active_menus_default') ?: array_keys(menu_ui_get_menus());
  if (!in_array($menu->id(), $active_menus)) {
    $active_menus[] = $menu->id();
    $config
      ->set('active_menus_default', $active_menus)
      ->save();
  }
}

/**
 * Implements hook_menu_update().
 */
function menu_ui_menu_update(Menu $menu) {
  menu_cache_clear_all();
  // Invalidate the block cache to update menu-based derivatives.
  if (\Drupal::moduleHandler()->moduleExists('block')) {
    \Drupal::service('plugin.manager.block')->clearCachedDefinitions();
  }
}

/**
 * Implements hook_menu_predelete().
 */
function menu_ui_menu_predelete(Menu $menu) {
  // Delete all links from the menu.
  /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $menu_tree */
  $menu_tree = \Drupal::service('menu.link_tree');
  $menu_tree->deleteLinksInMenu($menu->id());

  // Remove menu from active menus variable.
  $config = \Drupal::config('system.menu');
  $active_menus = $config->get('active_menus_default') ?: array_keys(menu_ui_get_menus());
  if (in_array($menu->id(), $active_menus)) {
    $active_menus = array_diff($active_menus, array($menu->id()));
    // Prevent the gap left by the removed menu from causing array indices to
    // be saved.
    $active_menus = array_values($active_menus);
    $config
      ->set('active_menus_default', $active_menus)
      ->save();
  }
}

/**
 * Implements hook_menu_delete().
 */
function menu_ui_menu_delete(Menu $menu) {
  menu_cache_clear_all();

  // Invalidate the block cache to update menu-based derivatives.
  if (\Drupal::moduleHandler()->moduleExists('block')) {
    \Drupal::service('plugin.manager.block')->clearCachedDefinitions();
  }
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter() for 'system_menu_block'.
 */
function menu_ui_block_view_system_menu_block_alter(array &$build, BlockPluginInterface $block) {
  // Add contextual links for system menu blocks.
  $menus = menu_list_system_menus();
  $menu_name = $block->getDerivativeId();
  if (isset($menus[$menu_name]) && isset($build['content'])) {
    foreach (Element::children($build['content']) as $key) {
      $build['#contextual_links']['menu'] = array(
        'route_parameters' => array('menu' => $menu_name),
      );
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function menu_ui_node_insert(EntityInterface $node) {
  menu_ui_node_save($node);
}

/**
 * Implements hook_node_update().
 */
function menu_ui_node_update(EntityInterface $node) {
  menu_ui_node_save($node);
}

 /**
 * Implements hook_node_type_insert().
 */
function menu_ui_node_type_insert(NodeTypeInterface $type) {
  if ($type->isSyncing()) {
    return;
  }
  \Drupal::config('menu.entity.node.' . $type->id())
    ->set('available_menus', array('main'))
    ->set('parent', 'main:')
    ->save();
}

/**
 * Implements hook_node_type_delete().
 */
function menu_ui_node_type_delete(NodeTypeInterface $type) {
  if ($type->isSyncing()) {
    return;
  }
  \Drupal::config('menu.entity.node.' . $type->id())->delete();
}


/**
 * Helper for hook_node_insert() and hook_node_update().
 */
function menu_ui_node_save(EntityInterface $node) {
  if (isset($node->menu)) {
    /** @var \Drupal\menu_link_content\Entity\MenuLinkContentInterface $link */
    $link = &$node->menu;
    if (!$link->enabled) {
      if (!$link->isNew()) {
        $link->delete();
      }
    }
    elseif (trim($link->getTitle())) {
      $link->title->value = trim($link->getTitle());
      $link->route_name->value = 'node.view';
      $link->setRouteParameters(array('node' => $node->id()));
      $options = $link->getOptions();
      if (trim($link->getDescription())) {
        $options['attributes']['title'] = trim($link->getDescription());
      }
      else {
        // If the description field was left empty, remove the title attribute
        // from the menu link.
        unset($options['attributes']['title']);
      }
      $link->setOptions($options);
      if (!$link->save()) {
        drupal_set_message(t('There was an error saving the menu link.'), 'error');
      }
    }
  }
}

/**
 * Implements hook_node_predelete().
 */
function menu_ui_node_predelete(EntityInterface $node) {
  // Delete all Menu UI module links that point to this node.
  $query = \Drupal::entityQuery('menu_link_content')
    ->condition('route_name', 'node.view')
    ->condition('route_parameters', serialize(array('node' => $node->id())));
  $result = $query->execute();

  if (!empty($result)) {
    $menu_link = \Drupal::entityManager()->getStorage('menu_link_content')->load(reset($result));
    $menu_link->delete();
  }
}

/**
 * Implements hook_node_prepare_form().
 */
function menu_ui_node_prepare_form(NodeInterface $node, $operation, array &$form_state) {
  if (empty($node->menu)) {
    // Prepare the node for the edit form so that $node->menu always exists.
    $node_type_config = \Drupal::config('menu.entity.node.' . $node->getType());
    $menu_name = strtok($node_type_config->get('parent'), ':');
    $menu_link = FALSE;
    if ($node->id()) {
      $id = FALSE;
      // Give priority to the default menu
      $type_menus = $node_type_config->get('available_menus');
      if (in_array($menu_name, $type_menus)) {
        $query = \Drupal::entityQuery('menu_link_content')
          ->condition('route_name', 'node.view')
          ->condition('route_parameters', serialize(array('node' => $node->id())))
          ->condition('menu_name', $menu_name)
          ->sort('id', 'ASC')
          ->range(0, 1);
        $result = $query->execute();

        $id = (!empty($result)) ? reset($result) : FALSE;
      }
      // Check all allowed menus if a link does not exist in the default menu.
      if (!$id && !empty($type_menus)) {
        $query = \Drupal::entityQuery('menu_link_content')
          ->condition('route_name', 'node.view')
          ->condition('route_parameters', serialize(array('node' => $node->id())))
          ->condition('menu_name', array_values($type_menus), 'IN')
          ->sort('id', 'ASC')
          ->range(0, 1);
        $result = $query->execute();

        $id = (!empty($result)) ? reset($result) : FALSE;
      }
      if ($id) {
        $menu_link = \Drupal::entityManager()->getStorage('menu_link_content')->load($id);
      }
    }

    if (!$menu_link) {
      $menu_link = entity_create('menu_link_content', array(
        'id' => 0,
        'parent' => '',
        'menu_name' => $menu_name,
        'bundle' => 'menu_link_content',
      ));
    }
    // Set default values.
    $node->menu = $menu_link;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Adds menu item fields to the node form.
 *
 * @see menu_ui_node_submit()
 */
function menu_ui_form_node_form_alter(&$form, $form_state) {
  // Generate a list of possible parents (not including this link or descendants).
  // @todo This must be handled in a #process handler.
  $node = $form_state['controller']->getEntity();
  /** @var \Drupal\menu_link_content\Entity\MenuLinkContentInterface $link */
  $link = $node->menu;
  $type = $node->getType();
  /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $link_tree */
  $link_tree = \Drupal::menuTree();
  $available_menus = menu_ui_get_menus();
  $type_menus = \Drupal::config("menu.entity.node.$type")->get('available_menus');
  foreach ($type_menus as $menu) {
    $available_menus[$menu] = $menu;
  }
  $options = $link_tree->getParentSelectOptions($link->getPluginId(), $available_menus);
  // If no possible parent menu items were found, there is nothing to display.
  if (empty($options)) {
    return;
  }

  $form['menu'] = array(
    '#type' => 'details',
    '#title' => t('Menu settings'),
    '#access' => \Drupal::currentUser()->hasPermission('administer menu'),
    '#open' => (bool) $link->getTitle(),
    '#group' => 'advanced',
    '#attached' => array(
      'library' => array('menu/drupal.menu'),
    ),
    '#tree' => TRUE,
    '#weight' => -2,
    '#attributes' => array('class' => array('menu-link-form')),
  );
  $form['menu']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Provide a menu link'),
    '#default_value' => (int) (bool) $link->id(),
  );
  $form['menu']['link'] = array(
    '#type' => 'container',
    '#parents' => array('menu'),
    '#states' => array(
      'invisible' => array(
        'input[name="menu[enabled]"]' => array('checked' => FALSE),
      ),
    ),
  );

  // Populate the element with the link data.
  foreach (array('id', 'hidden', 'options', 'expanded', 'bundle') as $key) {
    $form['menu']['link'][$key] = array('#type' => 'value', '#value' => $link->{$key}->value);
  }

  $form['menu']['link']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Menu link title'),
    '#default_value' => $link->getTitle(),
  );

  $form['menu']['link']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => isset($link->getOptions()['attributes']['title']) ? $link->getOptions()['attributes']['title'] : '',
    '#rows' => 1,
    '#description' => t('Shown when hovering over the menu link.'),
  );

  if ($link->id()) {
    $default = $link->getMenuName() . ':' . $link->getParent();
  }
  else {
    $default = \Drupal::config('menu.entity.node.'.$type)->get('parent');
  }
  // If the current parent menu item is not present in options, use the first
  // available option as default value.
  // @todo User should not be allowed to access menu link settings in such a
  // case.
  if (!isset($options[$default])) {
    $array = array_keys($options);
    $default = reset($array);
  }
  $form['menu']['link']['parent'] = array(
    '#type' => 'select',
    '#title' => t('Parent item'),
    '#default_value' => $default,
    '#options' => $options,
    '#attributes' => array('class' => array('menu-parent-select')),
  );

  // Get number of items in menu so the weight selector is sized appropriately.
  $delta = $link_tree->countMenuLinks($link->getMenuName());
  if ($delta < 50) {
    // Old hardcoded value
    $delta = 50;
  }
  $form['menu']['link']['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#delta' => $delta,
    '#default_value' => $link->getWeight(),
    '#description' => t('Menu links with lower weights are displayed before links with higher weights.'),
  );
}

/**
 * Implements hook_node_submit().
 *
 * @see menu_ui_form_node_form_alter()
 */
function menu_ui_node_submit(EntityInterface $node, $form, $form_state) {
  if (!empty($form_state['values']['menu'])) {
    $original_menu_id = !empty($node->menu) ? $node->menu->id() : NULL;
    $node->menu = entity_create('menu_link_content', $form_state['values']['menu']);
    // @todo Do not create a new entity in order to update it, see
    //   https://drupal.org/node/2241865
    // If this menu had a previous menu link associated, mark it as not new.
    if ($original_menu_id) {
      $node->menu->setOriginalId($original_menu_id);
    }
    // Decompose the selected menu parent option into 'menu_name' and 'plid', if
    // the form used the default parent selection widget.
    if (!empty($form_state['values']['menu']['parent'])) {
      list($node->menu->menu_name->value, $node->menu->parent->value) = explode(':', $form_state['values']['menu']['parent']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds menu options to the node type form.
 *
 * @see NodeTypeForm::form().
 * @see menu_ui_form_node_type_form_submit().
 */
function menu_ui_form_node_type_form_alter(&$form, $form_state) {
  /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $link_tree */
  $link_tree = \Drupal::menuTree();
  $menu_options = menu_ui_get_menus();
  $type = $form_state['controller']->getEntity();
  if ($type->id()) {
    $config_values = \Drupal::config('menu.entity.node.' . $type->id())->get();
  }
  else {
    $config_values = array(
      'available_menus' => array('main'),
      'parent' => 'main:0',
    );
  }
  $form['menu'] = array(
    '#type' => 'details',
    '#title' => t('Menu settings'),
    '#attached' => array(
      'library' => array('menu/drupal.menu.admin'),
    ),
    '#group' => 'additional_settings',
  );
  $form['menu']['menu_options'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available menus'),
    '#default_value' => $config_values['available_menus'],
    '#options' => $menu_options,
    '#description' => t('The menus available to place links in for this content type.'),
  );
  // To avoid an 'illegal option' error after saving the form we have to load
  // all available menu items.
  // Otherwise it is not possible to dynamically add options to the list.
  // @todo Convert menu_ui_parent_options() into a #process callback.
  $options = $link_tree->getParentSelectOptions('');
  $form['menu']['menu_parent'] = array(
    '#type' => 'select',
    '#title' => t('Default parent item'),
    '#default_value' => $config_values['parent'],
    '#options' => $options,
    '#description' => t('Choose the menu item to be the default parent for a new link in the content authoring form.'),
    '#attributes' => array('class' => array('menu-title-select')),
  );

  $form['actions']['submit']['#submit'][] = 'menu_ui_form_node_type_form_submit';
}

/**
 * Submit handler for forms with menu options.
 *
 * @see menu_ui_form_node_type_form_alter().
 */
function menu_ui_form_node_type_form_submit(&$form, $form_state) {
  $type = $form_state['controller']->getEntity();
  \Drupal::config('menu.entity.node.' . $type->id())
    ->set('available_menus', array_values(array_filter($form_state['values']['menu_options'])))
    ->set('parent', $form_state['values']['menu_parent'])
    ->save();
}

/**
 * Return an associative array of the custom menus names.
 *
 * @param $all
 *   If FALSE return only user-added menus, or if TRUE also include
 *   the menus defined by the system.
 * @return
 *   An array with the machine-readable names as the keys, and human-readable
 *   titles as the values.
 */
function menu_ui_get_menus($all = TRUE) {
  if ($custom_menus = entity_load_multiple('menu')) {
    if (!$all) {
      $custom_menus = array_diff_key($custom_menus, menu_list_system_menus());
    }
    foreach ($custom_menus as $menu_name => $menu) {
      $custom_menus[$menu_name] = $menu->label();
    }
    asort($custom_menus);
  }
  return $custom_menus;
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function menu_ui_preprocess_block(&$variables) {
  if ($variables['configuration']['provider'] == 'menu_ui') {
    $variables['attributes']['role'] = 'navigation';
  }
}


/**
 * Implements hook_system_breadcrumb_alter().
 */
function menu_ui_system_breadcrumb_alter(array &$breadcrumb, array $attributes, array $context) {
  // Custom breadcrumb behavior for editing menu links, we append a link to
  // the menu in which the link is found.
  if (!empty($attributes[RouteObjectInterface::ROUTE_NAME]) && $attributes[RouteObjectInterface::ROUTE_NAME] == 'menu_ui.link_edit' && !empty($attributes['menu_link_plugin'])) {
    $menu_link = $attributes['menu_link_plugin'];
    if (($menu_link instanceof MenuLinkInterface)) {
      // Add a link to the menu admin screen.
      $menu = entity_load('menu', $menu_link->getMenuName());
      $breadcrumb[] = Drupal::l($menu->label(), 'menu_ui.menu_edit', array('menu' => $menu->id()));
    }
  }
}

