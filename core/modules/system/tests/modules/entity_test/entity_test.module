<?php

/**
 * @file
 * Test module for the entity API providing an entity type for testing.
 */

/**
 * Implements hook_entity_info().
 */
function entity_test_entity_info() {
  $items['entity_test'] = array(
    'label' => t('Test entity'),
    'entity class' => 'Drupal\entity_test\EntityTest',
    'controller class' => 'Drupal\entity_test\EntityTestStorageController',
    'form controller class' => array(
      'default' => 'Drupal\entity_test\EntityTestFormController',
    ),
    'base table' => 'entity_test',
    'data table' => 'entity_test_property_data',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'uuid' => 'uuid',
    ),
  );
  // Optionally specify a translation handler for testing translations.
  if (variable_get('entity_test_translation')) {
    $items['entity_test']['translation']['entity_test'] = TRUE;
  }
  return $items;
}

/**
 * Implements hook_permission().
 */
function entity_test_permission() {
  $permissions = array(
    'administer entity_test content' => array(
      'title' => t('Administer entity_test content'),
      'description' => t('Manage entity_test content'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function entity_test_menu() {
  $items = array();

  $items['entity-test/add'] = array(
    'title' => 'Add an entity_test',
    'page callback' => 'entity_test_add',
    'access arguments' => array('administer entity_test content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['entity-test/manage/%entity_test'] = array(
    'title' => 'Edit test entity',
    'page callback' => 'entity_test_edit',
    'page arguments' => array(2),
    'access arguments' => array('administer entity_test content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['entity-test/manage/%entity_test/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

/**
 * Menu callback: displays the 'Add new entity_test' form.
 */
function entity_test_add() {
  drupal_set_title(t('Create an entity_test'));
  $entity = entity_create('entity_test', array());
  return entity_get_form($entity);
}

/**
 * Menu callback: displays the 'Edit existing entity_test' form.
 */
function entity_test_edit($entity) {
  drupal_set_title(t('entity_test @id', array('@id' => $entity->id())), PASS_THROUGH);
  return entity_get_form($entity);
}

/**
 * Loads a test entity.
 *
 * @param int $id
 *   A test entity ID.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return Drupal\entity_test\EntityTest
 *   The loaded entity object, or FALSE if the entity cannot be loaded.
 */
function entity_test_load($id, $reset = FALSE) {
  return entity_load('entity_test', $id, $reset);
}

/**
 * Loads multiple test entities based on certain conditions.
 *
 * @param array $ids
 *   (optional) An array of entity IDs. If omitted, all entities are loaded.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return array
 *   An array of test entity objects, indexed by ID.
 */
function entity_test_load_multiple(array $ids = NULL, $reset = FALSE) {
  return entity_load_multiple('entity_test', $ids, $reset);
}

/**
 * Deletes multiple test entities.
 *
 * @param $ids
 *   An array of test entity IDs.
 */
function entity_test_delete_multiple(array $ids) {
  entity_get_controller('entity_test')->delete($ids);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function entity_test_form_node_form_alter(&$form, &$form_state, $form_id) {
  $langcode = $form_state['controller']->getFormLangcode($form_state);
  variable_set('entity_form_langcode', $langcode);
}
