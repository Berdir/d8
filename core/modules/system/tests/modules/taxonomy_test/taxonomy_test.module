<?php

/**
 * @file
 * Test module for Taxonomy hooks and functions not used in core.
 *
 * @see Drupal\taxonomy\Tests\TaxonomyHooksTestCase::testTaxonomyTermHooks()
 */

use Drupal\taxonomy\Plugin\Core\Entity\Term;
use Drupal\entity\Plugin\Core\Entity\EntityDisplay;

/**
 * Implements hook_taxonomy_term_load().
 */
function taxonomy_test_taxonomy_term_load(array $terms) {
  foreach ($terms as $term) {
    $antonym = taxonomy_test_get_antonym($term->tid);
    if ($antonym) {
      $term->antonym = $antonym;
    }
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function taxonomy_test_taxonomy_term_insert(Term $term) {
  if (!empty($term->antonym)) {
    db_insert('taxonomy_term_antonym')
      ->fields(array(
        'tid' => $term->tid,
        'name' => trim($term->antonym)
      ))
      ->execute();
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function taxonomy_test_taxonomy_term_update(Term $term) {
  if (!empty($term->antonym)) {
    db_merge('taxonomy_term_antonym')
      ->key(array('tid' => $term->tid))
      ->fields(array(
        'name' => trim($term->antonym)
      ))
      ->execute();
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function taxonomy_test_taxonomy_term_delete(Term $term) {
  db_delete('taxonomy_term_antonym')
    ->condition('tid', $term->tid)
    ->execute();
}

/**
 * Implements hook_taxonomy_term_view().
 */
function taxonomy_test_taxonomy_term_view(Term $term, EntityDisplay $display, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    $term->content['taxonomy_test_term_view_check'] = array(
      '#prefix' => '<div>',
      '#markup' => t('The antonym is %antonym', array('%antonym' => $term->antonym)),
      '#suffix' => '</div>',
      '#weight' => 10,
    );
  }
}

/**
 * Implements hook_entity_view().
 */
function taxonomy_test_entity_view($entity, EntityDisplay $display, $view_mode, $langcode) {
  if ($entity->entityType() == 'taxonomy_term' && $view_mode == 'full') {
    $entity->content['taxonomy_test_entity_view_check'] = array(
      '#prefix' => '<div>',
      '#markup' => t('The antonym is %antonym', array('%antonym' => $entity->antonym)),
      '#suffix' => '</div>',
      '#weight' => 20,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function taxonomy_test_form_taxonomy_term_form_alter(&$form, $form_state, $form_id) {
  $term = $form_state['controller']->getEntity($form_state);
  $antonym = taxonomy_test_get_antonym($term->tid);
  $form['advanced']['antonym'] = array(
    '#type' => 'textfield',
    '#title' => t('Antonym'),
    '#default_value' => !empty($antonym) ? $antonym : '',
    '#description' => t('Antonym of this term.')
  );
}

/**
 * Return the antonym of the given term ID.
 */
function taxonomy_test_get_antonym($tid) {
  return db_select('taxonomy_term_antonym', 'ta')
    ->fields('ta', array('name'))
    ->condition('tid', $tid)
    ->execute()
    ->fetchField();
}
