<?php

/**
 * @file
 * Manage the entity system.
 *
 * The module is mostly an anchor point for configuration items owned by the
 * entity system.
 */

use Drupal\Core\Config\Entity\ConfigEntityStorage;

/**
 * Implements hook_permission().
 */
function entity_permission() {
  return array(
    'administer display modes' => array(
      'title' => t('Add, edit, and delete custom display modes.'),
    ),
  );
}

/**
 * Implements hook_entity_bundle_rename().
 */
function entity_entity_bundle_rename($entity_type_id, $bundle_old, $bundle_new) {
  // Rename entity displays.
  $entity_type = \Drupal::entityManager()->getDefinition('entity_view_display');
  if ($bundle_old !== $bundle_new) {
    $ids = \Drupal::configFactory()->listAll('entity.view_display.' . $entity_type_id . '.' . $bundle_old . '.');
    foreach ($ids as $id) {
      $id = ConfigEntityStorage::getIDFromConfigName($id, $entity_type->getConfigPrefix());
      $display = entity_load('entity_view_display', $id);
      $new_id = $entity_type_id . '.' . $bundle_new . '.' . $display->mode;
      $display->set('id', $new_id);
      $display->bundle = $bundle_new;
      $display->save();
    }
  }

  // Rename entity form displays.
  $entity_type = \Drupal::entityManager()->getDefinition('entity_form_display');
  if ($bundle_old !== $bundle_new) {
    $ids = \Drupal::configFactory()->listAll('entity.form_display.' . $entity_type_id . '.' . $bundle_old . '.');
    foreach ($ids as $id) {
      $id = ConfigEntityStorage::getIDFromConfigName($id, $entity_type->getConfigPrefix());
      $form_display = entity_load('entity_form_display', $id);
      $new_id = $entity_type_id . '.' . $bundle_new . '.' . $form_display->mode;
      $form_display->set('id', $new_id);
      $form_display->bundle = $bundle_new;
      $form_display->save();
    }
  }
}

/**
 * Implements hook_entity_bundle_delete().
 */
function entity_entity_bundle_delete($entity_type_id, $bundle) {
  // Remove entity displays of the deleted bundle.
  $entity_type = \Drupal::entityManager()->getDefinition('entity_view_display');
  $ids = \Drupal::configFactory()->listAll('entity.view_display.' . $entity_type_id . '.' . $bundle . '.');
  foreach ($ids as &$id) {
    $id = ConfigEntityStorage::getIDFromConfigName($id, $entity_type->getConfigPrefix());
  }
  entity_delete_multiple('entity_view_display', $ids);

  // Remove entity form displays of the deleted bundle.
  $entity_type = \Drupal::entityManager()->getDefinition('entity_form_display');
  $ids = \Drupal::configFactory()->listAll('entity.form_display.' . $entity_type_id . '.' . $bundle . '.');
  foreach ($ids as &$id) {
    $id = ConfigEntityStorage::getIDFromConfigName($id, $entity_type->getConfigPrefix());
  }
  entity_delete_multiple('entity_form_display', $ids);
}

/**
 * Implements hook_module_preuninstall().
 */
function entity_module_preuninstall($module) {
  // Clean up all entity bundles (including field instances) of every entity
  // type provided by the module that is being uninstalled.
  foreach (\Drupal::entityManager()->getDefinitions() as $entity_type_id => $entity_type) {
    if ($entity_type->getProvider() == $module) {
      foreach (array_keys(entity_get_bundles($entity_type_id)) as $bundle) {
        entity_invoke_bundle_hook('delete', $entity_type_id, $bundle);
      }
    }
  }
}
