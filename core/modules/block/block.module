<?php

/**
 * @file
 * Controls the visual building blocks a page is constructed with.
 */

use Drupal\Component\Plugin\Exception\PluginException;

/**
 * Denotes that a block is not enabled in any region and should not be shown.
 */
const BLOCK_REGION_NONE = -1;

/**
 * Users cannot control whether or not they see this block.
 */
const BLOCK_CUSTOM_FIXED = 0;

/**
 *  Shows this block by default, but lets individual users hide it.
 */
const BLOCK_CUSTOM_ENABLED = 1;

/**
 * Hides this block by default but lets individual users show it.
 */
const BLOCK_CUSTOM_DISABLED = 2;

/**
 * Shows this block on every page except the listed pages.
 */
const BLOCK_VISIBILITY_NOTLISTED = 0;

/**
 * Shows this block on only the listed pages.
 */
const BLOCK_VISIBILITY_LISTED = 1;

/**
 * Shows this block if the associated PHP code returns TRUE.
 */
const BLOCK_VISIBILITY_PHP = 2;

/**
 * Implements hook_help().
 */
function block_help($path, $arg) {
  switch ($path) {
    case 'admin/help#block':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Block module allows you to create boxes of content, which are rendered into an area, or region, of one or more pages of a website. The core Seven administration theme, for example, implements the regions "Content" and "Help", and a block may appear in either of these regions. The <a href="@blocks">Blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions. For more information, see the online handbook entry for <a href="@block">Block module</a>.', array('@block' => 'http://drupal.org/documentation/modules/block', '@blocks' => url('admin/structure/block'))) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Positioning content') . '</dt>';
      $output .= '<dd>' . t('When working with blocks, remember that all themes do <em>not</em> implement the same regions, or display regions in the same way. Blocks are positioned on a per-theme basis. Users with the <em>Administer blocks</em> permission can disable blocks. Disabled blocks are listed on the <a href="@blocks">Blocks administration page</a>, but are not displayed in any region.', array('@block' => 'http://drupal.org/documentation/modules/block', '@blocks' => url('admin/structure/block'))) . '</dd>';
      $output .= '<dt>' . t('Controlling visibility') . '</dt>';
      $output .= '<dd>' . t('Blocks can be configured to be visible only on certain pages, only to users of certain roles, or only on pages displaying certain <a href="@content-type">content types</a>. Some dynamic blocks, such as those generated by modules, will be displayed only on certain pages.', array('@content-type' => url('admin/structure/types'), '@user' => url('user'))) . '</dd>';
      if (module_exists('custom_block')) {
        $output .= '<dt>' . t('Creating custom blocks') . '</dt>';
        $output .= '<dd>' . t('Users with the <em>Administer blocks</em> permission can <a href="@block-add">add custom blocks</a>, which are then listed on the <a href="@blocks">Blocks administration page</a>. Once created, custom blocks behave just like default and module-generated blocks.', array('@blocks' => url('admin/structure/block'), '@block-add' => url('admin/structure/block/list/block_plugin_ui:' . variable_get('theme_default', 'stark') . '/add/custom_blocks'))) . '</dd>';
      }
      $output .= '</dl>';
      return $output;
  }
  if ($arg[0] == 'admin' && $arg[1] == 'structure' && $arg['2'] == 'block' && (empty($arg[3]) || $arg[3] == 'list') && empty($arg[5])) {
    if (!empty($arg[4])) {
      list(, $demo_theme) = explode(':', $arg[4]);
    }
    else {
      $demo_theme = variable_get('theme_default', 'stark');
    }
    $themes = list_themes();
    $output = '<p>' . t('This page provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions. Since not all themes implement the same regions, or display regions in the same way, blocks are positioned on a per-theme basis. Remember that your changes will not be saved until you click the <em>Save blocks</em> button at the bottom of the page. Click the <em>configure</em> link next to each block to configure its specific title and visibility settings.') . '</p>';
    $output .= '<p>' . l(t('Demonstrate block regions (@theme)', array('@theme' => $themes[$demo_theme]->info['name'])), 'admin/structure/block/demo/' . $demo_theme) . '</p>';
    return $output;
  }
}

/**
 * Implements hook_theme().
 */
function block_theme() {
  return array(
    'block' => array(
      'render element' => 'elements',
      'template' => 'block',
    ),
    'block_admin_display_form' => array(
      'template' => 'block-admin-display-form',
      'file' => 'block.admin.inc',
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function block_permission() {
  return array(
    'administer blocks' => array(
      'title' => t('Administer blocks'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * @todo Clarify the documentation for the per-plugin block admin links.
 */
function block_menu() {
  $default_theme = variable_get('theme_default', 'stark');
  $items['admin/structure/block'] = array(
    'title' => 'Blocks',
    'description' => 'Configure what block content appears in your site\'s sidebars and other regions.',
    'page callback' => 'block_admin_display',
    'page arguments' => array($default_theme),
    'access arguments' => array('administer blocks'),
    'file' => 'block.admin.inc',
  );
  $items['admin/structure/block/manage/%/%'] = array(
    'title' => 'Configure block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('block_admin_configure', 4, 5),
    'access arguments' => array('administer blocks'),
    'file' => 'block.admin.inc',
  );
  $items['admin/structure/block/manage/%/%/configure'] = array(
    'title' => 'Configure block',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/block/manage/%/%/delete'] = array(
    'title' => 'Delete block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('block_admin_block_delete', 4, 5),
    'access arguments' => array('administer blocks'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_NONE,
    'file' => 'block.admin.inc',
  );
  // Block administration is actually tied to theme and plugin definition so
  // that the plugin can appropriately attach to this url structure.
  $themes = list_themes();
  foreach (drupal_container()->get('plugin.manager.system.plugin_ui')->getDefinitions() as $plugin_id => $plugin) {
    list($plugin_base, $key) = explode(':', $plugin_id);
    if ($plugin_base == 'block_plugin_ui') {
      $theme = $themes[$key];
      $items['admin/structure/block/list/' . $plugin_id] = array(
        'title' => check_plain($theme->info['name']),
        'page arguments' => array($key),
        'type' => $key == $default_theme ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
        'weight' => $key == $default_theme ? -10 : 0,
        'access callback' => '_block_themes_access',
        'access arguments' => array($key),
        'file' => 'block.admin.inc',
      );
      $items['admin/structure/block/demo/' . $key] = array(
        'title' => check_plain($theme->info['name']),
        'page callback' => 'block_admin_demo',
        'page arguments' => array($key),
        'type' => MENU_CALLBACK,
        'access callback' => '_block_themes_access',
        'access arguments' => array($key),
        'theme callback' => '_block_custom_theme',
        'theme arguments' => array($key),
        'file' => 'block.admin.inc',
      );
    }
  }
  return $items;
}

/**
 * Access callback: Only enabled themes can be accessed.
 *
 * Path:
 * - admin/structure/block/list/% (for each theme)
 * - admin/structure/block/demo/% (for each theme)
 *
 * @param $theme
 *   Either the name of a theme or a full theme object.
 *
 * @see block_menu()
 */
function _block_themes_access($theme) {
  return user_access('administer blocks') && drupal_theme_access($theme);
}

/**
 * Theme callback: Uses the theme specified in the parameter.
 *
 * @param $theme
 *   The theme whose blocks are being configured. If not set, the default theme
 *   is assumed.
 *
 * @return
 *   The theme that should be used for the block configuration page, or NULL
 *   to indicate that the default theme should be used.
 *
 * @see block_menu()
 */
function _block_custom_theme($theme = NULL) {
  // We return exactly what was passed in, to guarantee that the page will
  // always be displayed using the theme whose blocks are being configured.
  return $theme;
}

/**
 * Implements hook_page_build().
 *
 * Renders blocks into their regions.
 */
function block_page_build(&$page) {
  global $theme;

  // The theme system might not yet be initialized. We need $theme.
  drupal_theme_initialize();

  // Fetch a list of regions for the current theme.
  $all_regions = system_region_list($theme);

  $item = menu_get_item();
  if ($item['path'] != 'admin/structure/block/demo/' . $theme) {
    // Load all region content assigned via blocks.
    foreach (array_keys($all_regions) as $region) {
      // Assign blocks to region.
      if ($blocks = block_get_blocks_by_region($region)) {
        $page[$region] = $blocks;
      }
    }
    // Once we've finished attaching all blocks to the page, clear the static
    // cache to allow modules to alter the block list differently in different
    // contexts. For example, any code that triggers hook_page_build() more
    // than once in the same page request may need to alter the block list
    // differently each time, so that only certain parts of the page are
    // actually built. We do not clear the cache any earlier than this, though,
    // because it is used each time block_get_blocks_by_region() gets called
    // above.
    drupal_static_reset('block_list');
  }
  else {
    // Append region description if we are rendering the regions demo page.
    $item = menu_get_item();
    if ($item['path'] == 'admin/structure/block/demo/' . $theme) {
      $visible_regions = array_keys(system_region_list($theme, REGIONS_VISIBLE));
      foreach ($visible_regions as $region) {
        $description = '<div class="block-region">' . $all_regions[$region] . '</div>';
        $page[$region]['block_description'] = array(
          '#markup' => $description,
          '#weight' => 15,
        );
      }
      $page['page_top']['backlink'] = array(
        '#type' => 'link',
        '#title' => t('Exit block region demonstration'),
        '#href' => 'admin/structure/block' . (variable_get('theme_default', 'stark') == $theme ? '' : '/list/' . $theme),
        // Add the "overlay-restore" class to indicate this link should restore
        // the context in which the region demonstration page was opened.
        '#options' => array('attributes' => array('class' => array('block-demo-backlink', 'overlay-restore'))),
        '#weight' => -10,
      );
    }
  }
}

/**
 * Gets a renderable array of a region containing all enabled blocks.
 *
 * @param $region
 *   The requested region.
 *
 * @return
 *   A renderable array of a region containing all enabled blocks.
 */
function block_get_blocks_by_region($region) {
  $build = array();
  if ($list = block_list($region)) {
    $build = _block_get_renderable_region($list);
  }
  return $build;
}

/**
 * Gets an array of blocks suitable for drupal_render().
 *
 * @param $list
 *   A list of blocks such as that returned by block_list().
 *
 * @return
 *   A renderable array.
 */
function _block_get_renderable_region($list = array()) {
  $build = array();
  // Block caching is not compatible with node_access modules. We also
  // preserve the submission of forms in blocks, by fetching from cache
  // only if the request method is 'GET' (or 'HEAD'). User 1 being out of
  // the regular 'roles define permissions' schema, it brings too many
  // chances of having unwanted output get in the cache and later be served
  // to other users. We therefore exclude user 1 from block caching.
  $not_cacheable = $GLOBALS['user']->uid == 1 ||
    count(module_implements('node_grants')) ||
    !in_array($_SERVER['REQUEST_METHOD'], array('GET', 'HEAD'));

  foreach ($list as $key => $block) {
    $config = $block->getConfig();
    $definition = $block->getDefinition();
    $build[$key] = array(
      '#block' => $block,
      '#weight' => (int) $config['weight'],
      '#theme_wrappers' => array('block'),
    );

    if ($not_cacheable || in_array($config['cache'], array(DRUPAL_NO_CACHE, DRUPAL_CACHE_CUSTOM))) {
      // Non-cached blocks get built immediately. Provides more content
      // that can be easily manipulated during hook_page_alter().
      $build[$key] = _block_get_renderable_block($build[$key]);
    }
    else {
      $key_components = explode('.', $key);
      $id = array_pop($key_components);
      $build[$key] += array(
        '#pre_render' => array('_block_get_renderable_block'),
        '#cache' => array(
          'keys' => array($id, $config['module']),
          'granularity' => $config['cache'],
          'bin' => 'block',
          'tags' => array('content' => TRUE),
        ),
      );
    }

    // Add contextual links for this block; skip the main content block, since
    // contextual links are basically output as tabs/local tasks already. Also
    // skip the help block, since we assume that most users do not need or want
    // to perform contextual actions on the help block, and the links needlessly
    // draw attention on it.
    if ($definition['class'] != 'Drupal\\system\\Plugin\\block\\block\\SystemHelpBlock' && $definition['class'] != 'Drupal\\system\\Plugin\\block\\block\\SystemMainBlock') {
      global $theme;
      $build[$key]['#contextual_links']['block'] = array('admin/structure/block/manage', array($key, $theme));
    }
  }
  return $build;
}

/**
 * Returns an array of block class instances by theme.
 *
 * @param $theme
 *   The theme to rehash blocks for. If not provided, defaults to the currently
 *   used theme.
 *
 * @return
 *   Blocks currently exported by modules.
 */
function _block_rehash($theme = NULL) {
  $blocks = array();
  $instances = array();
  $theme = $theme ? $theme : variable_get('theme_default', 'stark');
  $block_configs = config_get_storage_names_with_prefix('plugin.core.block.' . $theme);
  $regions = system_region_list($theme);
  foreach ($block_configs as $config) {
    // Only list valid block instances.
    if (!$block = block_load($config)) {
      continue;
    }
    $blocks[$config] = $block;
    $config = config($config);
    $region = $config->get('region');
    $status = $config->get('status');
    // Disable blocks in invalid regions.
    if (!empty($region) && $region != BLOCK_REGION_NONE && !isset($regions[$region]) && $status == 1) {
      drupal_set_message(t('The block %info was assigned to the invalid region %region and has been disabled.', array('%info' => $config->get('id'), '%region' => $region)), 'warning');
      // Disabled modules are moved into the BLOCK_REGION_NONE later so no
      // need to move the block to another region.
      $config->set('status', 0);
      $config->save();
    }
    // Set region to none if not enabled and make sure status is set.
    if (empty($status)) {
      $config->set('region', BLOCK_REGION_NONE);
      $config->set('status', 0);
      $config->save();
    }
  }
  return $blocks;
}

/**
 * Initializes blocks for enabled themes.
 *
 * @param $theme_list
 *   An array of theme names.
 */
function block_themes_enabled($theme_list) {
  foreach ($theme_list as $theme) {
    block_theme_initialize($theme);
  }
}

/**
 * Assigns an initial, default set of blocks for a theme.
 *
 * This function is called the first time a new theme is enabled. The new theme
 * gets a copy of the default theme's blocks, with the difference that if a
 * particular region isn't available in the new theme, the block is assigned
 * to the new theme's default region.
 *
 * @param $theme
 *   The name of a theme.
 */
function block_theme_initialize($theme) {
  // Initialize theme's blocks if none already registered.
  $has_blocks = config_get_storage_names_with_prefix('plugin.core.block.' . $theme);
  if (!$has_blocks) {
    $default_theme = variable_get('theme_default', 'stark');
    // Apply only to new theme's visible regions.
    $regions = system_region_list($theme, REGIONS_VISIBLE);
    $default_theme_blocks = config_get_storage_names_with_prefix('plugin.core.block.' . $default_theme);
    foreach ($default_theme_blocks as $config_id) {
      $block_config = config($config_id)->get();
      $machine_name = explode('.', $config_id);
      $machine_name = array_pop($machine_name);
      $new_config_id = 'plugin.core.block.' . $theme . '.' . $machine_name;
      $new_block = config($new_config_id);
      // If the region isn't supported by the theme, assign the block to the
      // theme's default region.
      if (!isset($regions[$block_config['region']])) {
        $new_block->set('region', system_default_region($theme));
        unset($block_config['region']);
      }
      foreach ($block_config as $key => $value) {
        $new_block->set($key, $value);
      }
      $new_block->save();
    }
  }
}

/**
 * Returns all blocks in the specified region for the current user.
 *
 * @param $region
 *   The name of a region.
 *
 * @return
 *   An array of block objects, indexed with the configuration object name
 *   that represents the configuration. If you are displaying your blocks in
 *   one or two sidebars, you may check whether this array is empty to see
 *   how many columns are going to be displayed.
 */
function block_list($region) {
  $blocks = &drupal_static(__FUNCTION__);

  if (!isset($blocks)) {
    $blocks = _block_load_blocks();
  }

  // Create an empty array if there are no entries.
  if (!isset($blocks[$region])) {
    $blocks[$region] = array();
  }

  return $blocks[$region];
}

/**
 * Loads a block instance.
 *
 * @param string $plugin_id
 *   The plugin ID to load.
 * @param array $conf
 *   An optional configuration array for creating a block instance manually
 *   rather than retrieving it from the configuration system.
 *
 * @return
 *   A block object.
 *
 * @todo Add block_load_multiple() and make this function a single-value wrapper.
 */
function block_load($plugin_id, array $conf = array()) {
  $manager = drupal_container()->get('plugin.manager.block');
  if (!$block = $manager->getInstance(array('config' => $plugin_id))) {
    // If the block instance does not exist, try to create it.
    try {
      $block = $manager->createInstance($plugin_id, $conf);
    }
    catch (PluginException $e) {
      $config = config($plugin_id)->get();
      // Ignore blocks belonging to disabled modules, but re-throw valid
      // exceptions when the module is enabled and the plugin is misconfigured.
      if (empty($config['module']) || module_exists($config['module'])) {
        throw $e;
      }
      return FALSE;
    }
  }
  return $block;
}

/**
 * Loads blocks' information from the configuration management system.
 *
 * @return
 *   An array of blocks grouped by region.
 *
 * @todo Remove this function, and replace it with a block_load_multiple().
 */
function _block_load_blocks() {
  global $theme;
  $blocks = array();
  $instances = config_get_storage_names_with_prefix('plugin.core.block.' . $theme);
  $manager = drupal_container()->get('plugin.manager.block');
  foreach ($instances as $plugin_id) {
    if ($block = block_load($plugin_id)) {
      $config = $block->getConfig();
      $blocks[$config['region']]["$plugin_id"] = $block;
    }
  }
  return $blocks;
}

/**
 * Builds the content and subject for a block.
 *
 * For cacheable blocks, this is called during #pre_render.
 *
 * @param $element
 *   A renderable array.
 *
 * @return
 *   A renderable array.
 */
function _block_get_renderable_block($element) {
  $block = $element['#block'];
  // Don't bother to build blocks that aren't accessible.
  if ($element['#access'] = $block->access()) {
    $build = $block->build();
    if ($build) {
      if (isset($build['#title'])) {
        $element['#title'] = $build['#title'];
      }
      $element += $build;
    }
    else {
      // @todo Add an inline comment explaining why this line is necessary.
      $element = array();
    }
  }
  return $element;
}

/**
 * Implements hook_cache_flush().
 */
function block_cache_flush() {
  return array('block');
}

/**
 * Implements hook_rebuild().
 */
function block_rebuild() {
  foreach (list_themes() as $name => $data) {
    if ($data->status) {
      _block_rehash($name);
    }
  }
}

/**
 * Processes variables for block.tpl.php.
 *
 * Prepares the values passed to the theme_block function to be passed
 * into a pluggable template engine. Uses block properties to generate a
 * series of template file suggestions. If none are found, the default
 * block.tpl.php is used.
 *
 * Most themes utilize their own copy of block.tpl.php. The default is located
 * inside "modules/block/block.tpl.php". Look in there for the full list of
 * variables.
 *
 * The $variables array contains the following arguments:
 * - $block
 *
 * @see block.tpl.php
 */
function template_preprocess_block(&$variables) {
  $block_counter = &drupal_static(__FUNCTION__, array());
  $variables['block'] = (object) array_merge($variables['elements']['#block']->getDefinition(), $variables['elements']['#block']->getConfig());
  if (!empty($variables['elements']['#title']) && empty($variables['block']->subject)) {
    $variables['block']->subject = $variables['elements']['#title'];
  }
  // All blocks get an independent counter for each region.
  if (!isset($block_counter[$variables['block']->region])) {
    $block_counter[$variables['block']->region] = 1;
  }
  // Same with zebra striping.
  $variables['block_zebra'] = ($block_counter[$variables['block']->region] % 2) ? 'odd' : 'even';
  $variables['block_id'] = $block_counter[$variables['block']->region]++;

  // Create the $content variable that templates expect.
  $variables['content'] = $variables['elements']['#children'];

  $variables['attributes']['class'][] = drupal_html_class('block-' . $variables['block']->module);

  // Add default class for block content.
  $variables['content_attributes']['class'][] = 'content';

  $variables['theme_hook_suggestions'][] = 'block__' . $variables['block']->region;
  $variables['theme_hook_suggestions'][] = 'block__' . $variables['block']->module;
  // Hyphens (-) and underscores (_) play a special role in theme suggestions.
  // Theme suggestions should only contain underscores, because within
  // drupal_find_theme_templates(), underscores are converted to hyphens to
  // match template file names, and then converted back to underscores to match
  // pre-processing and other function names. So if your theme suggestion
  // contains a hyphen, it will end up as an underscore after this conversion,
  // and your function names won't be recognized. So, we need to convert
  // hyphens to underscores in block deltas for the theme suggestions.

  // We can safely explode on : because we know the Block plugin type manager
  // enforces that delimiter for all derivatives.
  $parts = explode(':', $variables['elements']['#block']->getPluginId());
  $suggestion = 'block';
  while ($part = array_shift($parts)) {
    $variables['theme_hook_suggestions'][] = $suggestion .= '__' . strtr($part, '-', '_');
  }
  // Create a valid HTML ID and make sure it is unique.
  if (!empty($variables['block']->config_id)) {
    $config_id = explode('.', $variables['block']->config_id);
    $machine_name = array_pop($config_id);
    $variables['block_html_id'] = drupal_html_id('block-' . $machine_name);
    $variables['theme_hook_suggestions'][] = 'block__' . $machine_name;
  }
}

/**
 * Implements hook_user_role_delete().
 *
 * Removes deleted role from blocks that use it.
 */
function block_user_role_delete($role) {
  $block_configs = config_get_storage_names_with_prefix('plugin.core.block');
  foreach ($block_configs as $config_id) {
    $config = config($config_id);
    $roles = $config->get('visibility.role.roles');
    if (isset($roles[$role->rid])) {
      unset($roles[$role->rid]);
      $config->set('visibility.role.roles', $roles);
      $config->save();
    }
  }
}

/**
 * Implements hook_menu_delete().
 */
function block_menu_delete($menu) {
  $block_configs = config_get_storage_names_with_prefix('plugin.core.block');
  foreach ($block_configs as $config_id) {
    $config = config($config_id);
    if ($config->get('id') == 'menu_menu_block:' . $menu->id()) {
      $config->delete();
    }
  }
}

/**
 * Implements hook_admin_paths().
 */
function block_admin_paths() {
  $paths = array(
    // Exclude the block demonstration page from admin (overlay) treatment.
    // This allows us to present this page in its true form, full page.
    'admin/structure/block/demo/*' => FALSE,
  );
  return $paths;
}

/**
 * Implements hook_modules_uninstalled().
 *
 * Cleans up any block configuration for uninstalled modules.
 */
function block_modules_uninstalled($modules) {
  $block_configs = config_get_storage_names_with_prefix('plugin.core.block');
  foreach ($block_configs as $config_id) {
    $config = config($config_id);
    if (in_array($config->get('module'), $modules)) {
      $config->delete();
    }
  }
}

/**
 * Implements hook_language_delete().
 *
 * Delete the potential block visibility settings of the deleted language.
 */
function block_language_delete($language) {
  // Remove the block visibility settings for the deleted language.
  $block_configs = config_get_storage_names_with_prefix('plugin.core.block');
  foreach ($block_configs as $config_id) {
    $config = config($config_id);
    $languages = $config->get('visibility.language.langcodes');
    if (isset($languages[$language->langcode])) {
      unset($languages[$language->langcode]);
      $config->set('visibility.language.langcodes', $languages);
      $config->save();
    }
  }
}

/**
 * Implements hook_library_info().
 */
function block_library_info() {
  $libraries['drupal.block'] = array(
    'title' => 'Block',
    'version' => VERSION,
    'js' => array(
      drupal_get_path('module', 'block') . '/block.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
      array('system', 'drupal'),
    ),
  );

  return $libraries;
}
