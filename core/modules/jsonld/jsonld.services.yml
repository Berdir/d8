# Normalizers can be specified to support a particular class and format in
# Normalizer::supportsNormalization(). Since the first matching Normalizer
# is used, Normalizers should be ordered from most specific to least
# specific.
services:
  serializer.normalizer.entity_reference.jsonld:
    class: Drupal\jsonld\JsonldEntityReferenceNormalizer
    tags:
      - { name: normalizer, priority: 5 }
    arguments: ['@rdf.site_schema_manager', '@rdf.mapping_manager']
  serializer.normalizer.field_item.jsonld:
    class: Drupal\jsonld\JsonldFieldItemNormalizer
    tags:
      - { name: normalizer, priority: 5 }
    arguments: ['@rdf.site_schema_manager', '@rdf.mapping_manager']
  serializer.normalizer.entity.jsonld:
    class: Drupal\jsonld\JsonldEntityNormalizer
    tags:
      - { name: normalizer, priority: 5 }
    arguments: ['@rdf.site_schema_manager', '@rdf.mapping_manager']
  serializer.normalizer.rdf_schema.jsonld:
    class: Drupal\jsonld\JsonldRdfSchemaNormalizer
    tags:
      - { name: normalizer, priority: 5 }
    arguments: ['@rdf.site_schema_manager', '@rdf.mapping_manager']
# Add the encoder to the service container. Encoders can only specify which
# format they support in Encoder::supportsEncoding().
  serializer.encoder.jsonld:
    class: Drupal\jsonld\JsonldEncoder
    tags:
      - { name: encoder, priority: 5, format: jsonld }
  serializer.encoder.drupal_jsonld:
    class: Drupal\jsonld\JsonldEncoder
    tags:
      - { name: encoder, priority: 5, format: drupal_jsonld }
  jsonld.subscriber:
    class: Drupal\jsonld\EventSubscriber\JsonldSubscriber
    tags:
      - { name: event_subscriber }
