<?php

/**
 * @file
 * Enables users to create menu links.
 */

use Drupal\menu_link\Plugin\Core\Entity\MenuLink;

/**
 * Entity URI callback.
 *
 * @param \Drupal\menu_link\Plugin\Core\Entity\MenuLink $menu_link
 *   A menu link entity.
 */
function menu_link_uri(MenuLink $menu_link) {
  return array(
    'path' => $menu_link->link_path,
  );
}

/**
 * Loads a menu link entity.
 *
 * This function should never be called from within node_load() or any other
 * function used as a menu object load function since an infinite recursion may
 * occur.
 *
 * @param int $mlid
 *   The menu link ID.
 * @param bool $reset
 *   (optional) Whether to reset the menu_link_load_multiple() cache.
 *
 * @return \Drupal\menu_link\Plugin\Core\Entity\MenuLink|false
 *   A menu link entity.
 */
function menu_link_load($mlid = NULL, $reset = FALSE) {
  return entity_load('menu_link', $mlid, $reset);
}

/**
 * Loads menu link entities from the database.
 *
 * @param array $mlids
 *   (optional) An array of entity IDs. If omitted, all entities are loaded.
 * @param bool $reset
 *   (optional) Whether to reset the internal cache.
 *
 * @return array<\Drupal\menu_link\Plugin\Core\Entity\MenuLink>
 *   An array of menu link entities indexed by mlid.
 *
 * @see menu_link_load()
 * @see entity_load_multiple()
 */
function menu_link_load_multiple(array $mlids = NULL, $reset = FALSE) {
  return entity_load_multiple('menu_link', $mlids, $reset);
}

/**
 * Deletes a menu link.
 *
 * @param int $mlid
 *   The menu link ID.
 *
 * @see menu_link_delete_multiple()
 */
function menu_link_delete($mlid) {
  menu_link_delete_multiple(array($mlid));
}

/**
 * Deletes multiple menu links.
 *
 * @param array $mlids
 *   An array of menu link IDs.
 * @param bool $force
 *   (optional) Forces deletion. Internal use only, setting to TRUE is
 *   discouraged. Defaults to FALSE.
 * @param bool $prevent_reparenting
 *   (optional) Disables the re-parenting logic from the deletion process.
 *   Defaults to FALSE.
 */
function menu_link_delete_multiple(array $mlids, $force = FALSE, $prevent_reparenting = FALSE) {
  if (!$mlids) {
    // If no IDs or invalid IDs were passed, do nothing.
    return;
  }

  $controller = entity_get_controller('menu_link');
  if (!$force) {
    $entity_query = entity_query('menu_link');
    $group = $entity_query->orConditionGroup()
      ->condition('module', 'system', '<>')
      ->condition('updated', 0, '<>');

    $entity_query->condition('mlid', $mlids, 'IN');
    $entity_query->condition($group);

    $result = $entity_query->execute();
    $entities = $controller->load($result);
  }
  else {
    $entities = $controller->load($mlids);
  }
  $controller->preventReparenting($prevent_reparenting);
  $controller->delete($entities);
}

/**
 * Saves a menu link.
 *
 * After calling this function, rebuild the menu cache using
 * menu_cache_clear_all().
 *
 * @param \Drupal\menu_link\Plugin\Core\Entity\MenuLink $menu_link
 *   The menu link entity to be saved.
 */
function menu_link_save(MenuLink $menu_link) {
  $menu_link->save();
}

/**
 * Clones an array of menu links.
 *
 * @param array<MenuLink> $links
 *   An array of menu links to clone.
 * @param string $menu_name
 *   (optional) The name of a menu that the links will be cloned for. If not
 *   set, the cloned links will be in the same menu as the original set of
 *   links that were passed in.
 *
 * @return array<MenuLink>
 *   An array of menu links with the same properties as the passed-in array,
 *   but with the link identifiers removed so that a new link will be created
 *   when any of them is passed into
 *   Drupal\menu_link\MenuLinkStorageController::save().
 *
 * @see Drupal\menu_link\MenuLinkStorageController::save()
 */
function menu_link_clone($links, $menu_name = NULL) {
  foreach ($links as &$link) {
    $link = $link->createDuplicate();
    if (isset($menu_name)) {
      $link->menu_name = $menu_name;
    }
  }
  return $links;
}

/**
 * Inserts, updates, or deletes an uncustomized menu link related to a module.
 *
 * @param string $module
 *   The name of the module.
 * @param string $op
 *   Operation to perform: insert, update or delete.
 * @param string $link_path
 *   The path this link points to.
 * @param string $link_title
 *   Title of the link to insert or new title to update the link to.
 *   Unused for delete.
 *
 * @return bool|null
 *   The insert operation returns SAVED_NEW if the operation succeeded. Other
 *   operations return NULL.
 */
function menu_link_maintain($module, $op, $link_path, $link_title) {
  switch ($op) {
    case 'insert':
      $menu_link = entity_create('menu_link', array(
        'link_title' => $link_title,
        'link_path' => $link_path,
        'module' => $module,)
      );
      return $menu_link->save();
      break;
    case 'update':
      $menu_links = entity_load_multiple_by_properties('menu_link', array('link_path' => $link_path, 'module' => $module, 'customized' => 0));
      foreach ($menu_links as $menu_link) {
        $menu_link->link_title = $link_title;
        $menu_link->save();
      }
      break;
    case 'delete':
      $menu_links = entity_load_multiple_by_properties('menu_link', array('link_path' => $link_path));
      menu_link_delete_multiple(array_keys($menu_links));
      break;
  }
}
